// This file is generated by Firebase Studio.
'use server';

/**
 * @fileOverview Theme Generation AI agent.
 *
 * - generateTheme - A function that handles the theme generation process.
 * - GenerateThemeInput - The input type for the generateTheme function.
 * - GenerateThemeOutput - The return type for the generateTheme function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateThemeInputSchema = z.object({
  primaryColor: z
    .string()
    .describe('The primary color for the theme in hex format (e.g., #24292F).'),
  secondaryColor: z
    .string()
    .describe('The secondary color for the theme in hex format (e.g., #F6F8FA).'),
  accentColor: z
    .string()
    .describe('The accent color for the theme in hex format (e.g., #26A69A).'),
  fontFamily: z.string().describe('The font family for the theme (e.g., sans-serif).'),
  iconStyle: z.string().describe('The style of icons to use (e.g., minimalistic).'),
  layoutStyle: z.string().describe('The overall layout style (e.g., grid-based).'),
  animationStyle: z
    .string()
    .describe('The animation style to use (e.g., subtle animations).'),
});
export type GenerateThemeInput = z.infer<typeof GenerateThemeInputSchema>;

const GenerateThemeOutputSchema = z.object({
  themeName: z.string().describe('The name of the generated theme.'),
  themeDescription: z.string().describe('A description of the generated theme.'),
  themeConfig: z
    .string()
    .describe('A JSON string containing the complete theme configuration.'),
});
export type GenerateThemeOutput = z.infer<typeof GenerateThemeOutputSchema>;

export async function generateTheme(input: GenerateThemeInput): Promise<GenerateThemeOutput> {
  return generateThemeFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateThemePrompt',
  input: {schema: GenerateThemeInputSchema},
  output: {schema: GenerateThemeOutputSchema},
  prompt: `You are a theme generation AI, skilled in creating visually appealing and user-configurable themes for portfolio websites.

  Based on the following color palette, font family, icon style, layout style and animation style, generate a theme.

  Color Palette:
  - Primary Color: {{{primaryColor}}}
  - Secondary Color: {{{secondaryColor}}}
  - Accent Color: {{{accentColor}}}

  Font Family: {{{fontFamily}}}
  Icon Style: {{{iconStyle}}}
  Layout Style: {{{layoutStyle}}}
  Animation Style: {{{animationStyle}}}

  Instructions:
  1.  Generate a unique name for the theme.
  2.  Write a brief description of the theme highlighting its key features and design principles.
  3.  Create a complete theme configuration in JSON format that incorporates the provided color palette, font family, icon style, layout style, and animation style.

  Output:
  -   themeName: The generated theme name.
  -   themeDescription: A concise description of the theme.
  -   themeConfig: A JSON string containing the full theme configuration, using the provided inputs.
  `,
});

const generateThemeFlow = ai.defineFlow(
  {
    name: 'generateThemeFlow',
    inputSchema: GenerateThemeInputSchema,
    outputSchema: GenerateThemeOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
